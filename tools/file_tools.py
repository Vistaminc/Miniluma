"""
File tools module for handling files generated by the MiniLuma.
Provides functionality for saving, reading files, etc.
"""
import os
import base64
import re
import time
from typing import Optional
from tools.base import tool, register_tool
from utils.file_manager import FileManager

# Create global file manager
file_manager = FileManager()

@register_tool
@tool(name="Save Text", description="Save text content to a file")
def save_text(content: str, filename: str = None, description: str = None) -> str:
    """
    Save text content to a file.
    
    Args:
        content: Text content to save
        filename: Filename (optional)
        description: File description (optional)
        
    Returns:
        Path of the saved file
    """
    # Generate filename (if not provided)
    if filename is None:
        # Generate filename from description or use default name
        if description:
            # Convert description to valid filename
            valid_name = re.sub(r'[^\w\s-]', '', description).strip().lower()
            valid_name = re.sub(r'[-\s]+', '_', valid_name)
            filename = f"{valid_name}.txt"
        else:
            filename = f"saved_text_{int(time.time())}.txt"
    
    # Save file without forcing extension
    file_path = file_manager.save_file(content, filename)
    
    return f"Text saved to: {file_path}"

@register_tool
@tool(name="Save Code", description="Save code to a file")
def save_code(code: str, filename: str = None, language: str = 'python', description: str = None) -> str:
    """
    Save code to a file.
    
    Args:
        code: Code content to save
        filename: Filename (optional)
        language: Code language (default is python)
        description: Code description (optional)
        
    Returns:
        Path of the saved file
    """
    # Determine extension based on language
    extensions = {
        'python': '.py',
        'javascript': '.js',
        'html': '.html',
        'css': '.css',
        'java': '.java',
        'c': '.c',
        'cpp': '.cpp',
        'go': '.go',
        'rust': '.rs',
        'typescript': '.ts',
        'ruby': '.rb',
        'php': '.php',
        'shell': '.sh',
        'sql': '.sql',
        'markdown': '.md',
        'text': '.txt'
    }
    
    default_ext = extensions.get(language.lower(), '.txt')
    
    # Generate filename (if not provided)
    if filename is None:
        # Generate filename from description or use default name
        if description:
            # Convert description to valid filename
            valid_name = re.sub(r'[^\w\s-]', '', description).strip().lower()
            valid_name = re.sub(r'[-\s]+', '_', valid_name)
            filename = f"{valid_name}{default_ext}"
        else:
            filename = f"saved_code_{int(time.time())}{default_ext}"
    
    # Save file without forcing extension
    file_path = file_manager.save_file(code, filename)
    
    return f"Code saved to: {file_path}"

@register_tool
@tool(name="Save Image", description="Save Base64 encoded image to a file")
def save_image(base64_image: str, filename: str = None, description: str = None) -> str:
    """
    Save Base64 encoded image to a file.
    
    Args:
        base64_image: Base64 encoded image data (can include or exclude data URL prefix)
        filename: Filename (optional)
        description: Image description (optional)
        
    Returns:
        Path of the saved file
    """
    # Remove data URL prefix if present
    if "," in base64_image:
        base64_data = base64_image.split(",", 1)[1]
    else:
        base64_data = base64_image
    
    # Decode Base64 data
    image_data = base64.b64decode(base64_data)
    
    # Generate filename (if not provided)
    if filename is None:
        # Generate filename from description or use default name
        if description:
            # Convert description to valid filename
            valid_name = re.sub(r'[^\w\s-]', '', description).strip().lower()
            valid_name = re.sub(r'[-\s]+', '_', valid_name)
            filename = f"{valid_name}.png"
        else:
            filename = f"saved_image_{int(time.time())}.png"
    
    # Ensure file has extension
    if not any(filename.lower().endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.bmp']):
        filename += '.png'
    
    # Save file
    file_path = file_manager.save_binary_file(image_data, filename)
    
    return f"Image saved to: {file_path}"

@register_tool
@tool(name="Read File", description="Read file content")
def read_file(filepath: str) -> str:
    """
    Read file content.
    
    Args:
        filepath: File path
        
    Returns:
        File content
    """
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()
        return content
    except Exception as e:
        return f"Error reading file: {str(e)}"

@register_tool
@tool(name="List Saved Files", description="List all saved files in the current session")
def list_saved_files(subdir: Optional[str] = None) -> str:
    """
    List all saved files in the current session.
    
    Args:
        subdir: Optional subdirectory name
        
    Returns:
        String containing the list of saved files
    """
    files = file_manager.list_files(subdir)
    if not files:
        return "No files saved in the current session."
    
    file_list = "\n".join([f"{i+1}. {os.path.basename(file)}" for i, file in enumerate(files)])
    return f"Saved files in the current session (directory: {file_manager.get_session_dir()}):\n{file_list}"

def get_session_dir() -> str:
    """
    Get the directory path of the current session.
    
    Returns:
        Session directory path
    """
    return file_manager.get_session_dir()
